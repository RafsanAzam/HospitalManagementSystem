using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HospitalManagementSystem.Classes
{
    public class Doctor
    {
        private static int nextId;
        private string firstName;
        private string lastName;
        private string email;
        private int phone;
        private int streetNumber;
        private int streetName;
        private string city;
        private string state;

        public Doctor( int doctorNextId, string doctorFirstName, string doctorLastName, string doctorEmail, int doctorPhone, int doctorStreetNumber, int doctorStreetName, string doctorCity, string doctorState) 
        {
            nextId = doctorNextId;
            firstName = doctorFirstName;
            lastName = doctorLastName;
            email = doctorEmail;
            phone = doctorPhone;
            streetNumber = doctorStreetNumber;
            streetName = doctorStreetName;
            city = doctorCity;
            state = doctorState;
        }

        
              // *** ID should be generated by the system on object creation, not chosen/inputted by the user. ***
        public int Id
        {
            get { return nextId; }
            
            set
            {
                //Validation: Ensure that the ID is positive(>=0).
                if(value <= 0)
                {
                    throw new ArgumentException("ID must be a positive(>=0) integer");
                }
                nextId = value;
            }
            
        }
        

        public string FirstName
        {
            get { return firstName; } 

            set
            {
                // Validation: Ensure that the first name is not null or empty.
                if(string.IsNullOrEmpty(value))
                {
                    throw new ArgumentException("First name cannot be empty.");
                }

                firstName = value;
            }
        }

        public string LastName
        {
            get { return lastName; }
            set
            {
                //validation: Ensure that lastName is not null or empty.
                if(string.IsNullOrEmpty (value))
                {
                    throw new ArgumentException("Last name cannot be empty.");
                }
                lastName = value;
            }
        }

        public string Email
        {
            get { return email; }
            set { email = value; }
        }

        public int Phone
        {
            get { return phone; }
            set { phone = value; }
        }

        public int StreetNumber
        {
            get { return streetNumber; }
            set { streetNumber = value; }
        }

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        public string State
        {
            get { return state; }
            set { state = value; }
        }

        public override string ToString()
        {
            //customizing the format of the doctor's details.

            return $"Doctor ID: {nextId}\n" +
                $"Name: {firstName} {lastName}\n" +
                $"Email: {email}\n" +
                $"Phone: {phone}\n" +
                $"Address: {streetNumber} {streetName}, {city}, {state}";


        }
    }
}
